init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
}
GetEvenNumbers(10L)
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
}
GetEvenNumbers(10L)
student.physics.quiz.marks <- c(10L, 20L, 30L)
student.physics.viva.marks <- c(10L, 20L, 30L)
GetTotalMarks <- function(quiz.marks, viva.marks, ...){
total.marks <- quiz.marks + viva.marks + ...
avg.marks <- ave(quiz.marks,viva.marks)
return(list(total = total.marks, avg = avg.marks))
}
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks, c(10L, 20L, 30L))
student.physics.total.marks
#lazy evaluation
#switch
GetSummeryMarks <- function(total.marks, summary.type){
summary <- switch (summary.type,
"mean" = {mean(total.marks)
},
"variance" = {var(total.marks)
},
"median" = {median(total.marks)},
"Not Implemented"
)
summary
}
GetSummeryMarks(c(10L, 20L, 30L), "median")
#vectorized if
student.physics.viva.marks
ifelse(student.physics.viva.marks >= 15L,c("R","S","A"), c("D","A","X"))
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
init.val <- 0
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
}
GetEvenNumbers(10L)
student.physics.quiz.marks <- c(10L, 20L, 30L)
student.physics.viva.marks <- c(10L, 20L, 30L)
GetTotalMarks <- function(quiz.marks, viva.marks, ...){
total.marks <- quiz.marks + viva.marks + ...
avg.marks <- ave(quiz.marks,viva.marks)
return(list(total = total.marks, avg = avg.marks))
}
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks, c(10L, 20L, 30L))
student.physics.total.marks
#lazy evaluation
#switch
GetSummeryMarks <- function(total.marks, summary.type){
summary <- switch (summary.type,
"mean" = {mean(total.marks)
},
"variance" = {var(total.marks)
},
"median" = {median(total.marks)},
"Not Implemented"
)
summary
}
GetSummeryMarks(c(10L, 20L, 30L), "median")
#vectorized if
student.physics.viva.marks
ifelse(student.physics.viva.marks >= 15L,c("R","S","A"), c("D","A","X"))
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
init.val <- 0
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
for (mark in student.physics.quiz.marks) {
print(mark)
}
}
GetEvenNumbers(10L)
student.physics.quiz.marks <- c(10L, 20L, 30L)
student.physics.viva.marks <- c(10L, 20L, 30L)
GetTotalMarks <- function(quiz.marks, viva.marks, ...){
total.marks <- quiz.marks + viva.marks + ...
avg.marks <- ave(quiz.marks,viva.marks)
return(list(total = total.marks, avg = avg.marks))
}
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks, c(10L, 20L, 30L))
student.physics.total.marks
#lazy evaluation
#switch
GetSummeryMarks <- function(total.marks, summary.type){
summary <- switch (summary.type,
"mean" = {mean(total.marks)
},
"variance" = {var(total.marks)
},
"median" = {median(total.marks)},
"Not Implemented"
)
summary
}
GetSummeryMarks(c(10L, 20L, 30L), "median")
#vectorized if
student.physics.viva.marks
ifelse(student.physics.viva.marks >= 15L,c("R","S","A"), c("D","A","X"))
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
init.val <- 0
#while
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
#for
for (mark in student.physics.quiz.marks) {
print(mark)
}
#apply
student.marks <- matrix(c(10L, 20L, 30L,
40L, 50L, 60L,
70L, 80L, 90L), nrow = 3, ncol = 3, byrow = TRUE)
rownames(student.marks,c("rAHUL", "sANTA", "BANTA"))
colnames(student.marks, c("Phys","Math","Chem"))
apply(student.marks, 1, sum)
apply(student.marks, 2, mean)
colnames(student.marks)[apply(student.marks, 1, which.max)]
}
GetEvenNumbers(10L)
student.physics.quiz.marks <- c(10L, 20L, 30L)
student.physics.viva.marks <- c(10L, 20L, 30L)
GetTotalMarks <- function(quiz.marks, viva.marks, ...){
total.marks <- quiz.marks + viva.marks + ...
avg.marks <- ave(quiz.marks,viva.marks)
return(list(total = total.marks, avg = avg.marks))
}
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks, c(10L, 20L, 30L))
student.physics.total.marks
#lazy evaluation
#switch
GetSummeryMarks <- function(total.marks, summary.type){
summary <- switch (summary.type,
"mean" = {mean(total.marks)
},
"variance" = {var(total.marks)
},
"median" = {median(total.marks)},
"Not Implemented"
)
summary
}
GetSummeryMarks(c(10L, 20L, 30L), "median")
#vectorized if
student.physics.viva.marks
ifelse(student.physics.viva.marks >= 15L,c("R","S","A"), c("D","A","X"))
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
init.val <- 0
#while
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
#for
for (mark in student.physics.quiz.marks) {
print(mark)
}
}
GetEvenNumbers(10L)
student.marks <- matrix(c(10L, 20L, 30L,
40L, 50L, 60L,
70L, 80L, 90L), nrow = 3, ncol = 3, byrow = TRUE)
rownames(student.marks,c("rAHUL", "sANTA", "BANTA"))
student.physics.quiz.marks <- c(10L, 20L, 30L)
student.physics.viva.marks <- c(10L, 20L, 30L)
GetTotalMarks <- function(quiz.marks, viva.marks, ...){
total.marks <- quiz.marks + viva.marks + ...
avg.marks <- ave(quiz.marks,viva.marks)
return(list(total = total.marks, avg = avg.marks))
}
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks)
student.physics.total.marks
student.physics.total.marks <- GetTotalMarks(viva.marks = student.physics.viva.marks,quiz.marks = student.physics.quiz.marks, c(10L, 20L, 30L))
student.physics.total.marks
#lazy evaluation
#switch
GetSummeryMarks <- function(total.marks, summary.type){
summary <- switch (summary.type,
"mean" = {mean(total.marks)
},
"variance" = {var(total.marks)
},
"median" = {median(total.marks)},
"Not Implemented"
)
summary
}
GetSummeryMarks(c(10L, 20L, 30L), "median")
#vectorized if
student.physics.viva.marks
ifelse(student.physics.viva.marks >= 15L,c("R","S","A"), c("D","A","X"))
#repeat
GetEvenNumbers <- function(max.val){
init.val <- 0
repeat{
if (init.val <= max.val && (init.val%%2) == 0){
print(init.val)
init.val <- init.val + 1
next
} else if(init.val > max.val) {
break
} else {
init.val <- init.val + 1
next
}
}
init.val <- 0
#while
while(init.val <= max.val){
if ((init.val%%2) == 0){
print(init.val)
}
init.val <- init.val + 1
}
#for
for (mark in student.physics.quiz.marks) {
print(mark)
}
#apply
student.marks <- matrix(c(10L, 20L, 30L,
40L, 50L, 60L,
70L, 80L, 90L), nrow = 3, ncol = 3, byrow = TRUE)
rownames(student.marks) <- c("rAHUL", "sANTA", "BANTA")
colnames(student.marks) <- c("Phys","Math","Chem")
apply(student.marks, 1, sum)
apply(student.marks, 2, mean)
colnames(student.marks)[apply(student.marks, 1, which.max)]
}
GetEvenNumbers(10L)
search()
library("parallel")
search()
detach(package:parallel, unload=TRUE)
search()
if(require("parallel")) {
print(not loaded)
}
if(require("parallel")) {
print("not loaded")
}
setRepositories()
getwd()
getwd()
setwd(".")
getwd()
getwd()
#setwd(".")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
download.file(url)
getwd()
#setwd(".")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
download.file(url,getwd())
getwd()
#setwd(".")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("iris.data")
download.file(url, local)
iris.dataset <- read.table(local)
getwd()
#setwd(".")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("iris.data")
download.file(url, local)
iris.dataset <- read.table(local)
str(iris.dataset)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
remove.packages(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnectJars)
library(XLConnectJars)
R.Version()
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("rJava")
library(rJava)
R.Version()
Sys.getenv("R_ARCH")
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnectJars)
system("java -version")
library(XLConnect)
system("java -version")
Sys.getenv("R_ARCH")
install.packages("rJava")
library(rJava)
library(rJava)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("rJava")
library(rJava)
update.packages(ask = FALSE)
search()
install.packages("XLConnect")
library(XLConnect)
library("parallel")
search()
detach(package:parallel, unload=TRUE)
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
Sys.getenv(JAVA_HOME)
Sys.getenv("JAVA_HOME")
library(XLConnect)
search()
library(rJava)
search()
search()
library(XLConnect)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'https://www.rforge.net/')
install.packages('rJava')
library("rJava")
search()
install.packages('rJava')
library("rJava")
Sys.getenv(JAVA_HOME)
.libPaths()
library(XLConnect,lib = "C:\Users\NAYAKDUR\Documents\R_Workspace\RLibrary")
library(XLConnect,lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
install.packages("XLConnect", lib = "C:\Users\NAYAKDUR\Documents\R_Workspace\RLibrary")
install.packages("XLConnect", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
local <- file.path("irisdata.xls")
iris.xlsdata <- readWorksheetFromFile(local, sheet=1)
library(XLConnect,lib.loc = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(XLConnect,lib.loc = "C:\Users\NAYAKDUR\Documents\R_Workspace\RLibrary")
.libPaths("C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(XLConnect)
system("java -version")
Sys.getenv("R_ARCH")
Sys.getenv("JAVA_HOME")
Sys.setenv("JAVA_HOME", "C:\\Program Files\\Java\\jre6")
.libPaths()
library(XLConnect)
.libPaths()
.libPaths("C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(XLConnect)
search()
local <- file.path("irisdata.xls")
iris.xlsdata <- readWorksheetFromFile(local, sheet=1)
iris.xlsdata
install.packages("ROracle", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(ROracle)
.libPaths("C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(ROracle)
library(XLConnect)
search()
.libPaths()
install.packages("ROracle", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
library(ROracle)
install.packages("ROracle", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
install.packages("RODBC",type="source", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
.libPaths()
install.packages("ROracle",type="source", lib = "C:\\Users\\NAYAKDUR\\Documents\\R_Workspace\\RLibrary")
getwd()
#setwd(".")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("iris.data")
download.file(url, local)
iris.dataset <- read.table(local)
str(iris.dataset)
iris.dataset
iris.dataset
lapply(iris.dataset[1], mean)
iris.dataset[1]
iris.dataset[1]
iris.dataset <- read.table(local, FALSE)
local <- file.path("iris.data")
iris.dataset <- read.table(local, FALSE)
iris.dataset
iris.dataset <- read.table(local, TRUE)
local <- file.path("iris.data")
iris.dataset <- read.table(local)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("iris.data")
iris.dataset <- read.table(local)
download.file(url, local)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("iris.data")
download.file(url, local)
