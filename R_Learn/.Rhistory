assign("match.score",200)
match.score
match.environment$match.score <- 300 #assign cust env variable
mayc.environment$'match.score' #print cust env variable
match.environment$'match.score' #print cust env variable
match.environment <- new.env() #create custom environment
match.environment$'match.score' #print cust env variable
300
match.score <- 100 #assign operator
match.score #print score
assign("match.score",200) #assign function
match.score #print score
match.environment <- new.env() #create custom environment
match.environment$'match.score' <- 300 #assign cust env variable
match.environment$'match.score' #print cust env variable
clearPushBack()
#Custom Environment
match.environment <- new.env() #create custom environment
parent.env(match.environment)
match.environment$'match.score' <- 300 #assign cust env variable
match.environment$'match.score' #print cust env variable
#Arithmatic
10 + 5
10 - 5
10 / 5
10 * 3
10 ^ 3
10 ** 3
10 %% 3
10 %/% 3
10 ** 5
#Arithmatic
10 + 5
10 - 5
10 / 5
10 * 3
10 ^ 5
10 ** 5
10 %% 3
10 %/% 3
format(10 ** 5, scientific = FALSESSS)
format(10 ** 5, scientific = FALSE)
factorial(5)
log(2 , base = 10)
pi
1 / 0
#Special Number
-1 / 0
1 / 0
Inf + 5
is.finite(1/0)
is.infinite(1/0)
is.nan(na+5)
#Special Number
-1 / 0
1 / 0
Inf + 5
is.finite(1/0)
is.infinite(1/0)
is.nan(NA+5)
#Vectorized operation
student.marks <- c(10,20,30,40)
student.marks
student.marks <- c(10,20,30,40)
student.marks
mean(student.marks)
#Vectorized operation
student.marks <- c(10,20,30,40)
student.marks
mean(student.marks)
sqrt(student.marks)
student.marks <- c(10,20,30,40)
student.marks
mean(student.marks)
sqrt(student.marks)
student.marks <- student.marks + 5
student.marks >= 25
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#extracting elements
student.names[1:2]
student.marks[student.marks > 20]
#Atomic vector using command vector
vector("character",length = 3)
vector("integer",length = 3)
vector("numeric",length = 3)
vector("logical",length = 3)
#Matrix
#Array
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#extracting elements
student.names[1:2]
student.marks[student.marks > 20]
#Atomic vector using command vector
vector("character",length = 3)
vector("integer",length = 3)
vector("numeric",length = 3)
vector("logical",length = 3)
#coercion
student.weights <- c(10, 20, "30.5")
student.weights
as.character(student.weights)
as.integer(student.weights)
str(student.weights)
#factor
student.gender <- factor(c("Male","Female","Male"))
str(student.gender)
#Matrix
#Array
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#extracting elements
student.names[1:2]
student.marks[student.marks > 20]
#Atomic vector using command vector
vector("character",length = 3)
vector("integer",length = 3)
vector("numeric",length = 3)
vector("logical",length = 3)
#coercion
student.weights <- c(10, 20, "30.5")
student.weights
as.character(student.weights)
as.integer(student.weights)
str(student.weights)
#factor
student.gender <- factor(c("Male","Female","Male"))
str(student.gender)
#Matrix
#Array
#heterogenous
student.info <- list(student.names, student.gender, student.weights, student.marks)
str(student.info)
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#extracting elements
student.names[1:2]
student.marks[student.marks > 20]
#Atomic vector using command vector
vector("character",length = 3)
vector("integer",length = 3)
vector("numeric",length = 3)
vector("logical",length = 3)
#coercion
student.weights <- c(10, 20, "30.5")
student.weights
as.character(student.weights)
as.integer(student.weights)
str(student.weights)
#factor
student.gender <- factor(c("Male","Female","Male"))
str(student.gender)
#Matrix
#Array
#heterogenous
student.info <- list(name = student.names, gender = student.gender, weight = student.weights, mark = student.marks)
str(student.info)
#Atomic Vector
student.names <- c("Rax","Max","Tax")
student.marks <- c(10,20,30)
student.percentage <- c(20L, 30L, 40L)
is.character(student.names)
is.numeric(student.marks)
is.integer(student.percentage)
str(student.percentage)
#extracting elements
student.names[1:2]
student.marks[student.marks > 20]
#Atomic vector using command vector
vector("character",length = 3)
vector("integer",length = 3)
vector("numeric",length = 3)
vector("logical",length = 3)
#coercion
student.weights <- c(10, 20, "30.5")
student.weights
as.character(student.weights)
as.integer(student.weights)
str(student.weights)
#factor
student.gender <- factor(c("Male","Female","Male"))
str(student.gender)
#Matrix
#Array
#heterogenous
student.info <- list(name = student.names, gender = student.gender, weight = student.weights, mark = student.marks)
str(student.info)
student.info[1]
typeof(student.info[1])
student.info[[1]]
typeof(student.info[[1]])
git add
